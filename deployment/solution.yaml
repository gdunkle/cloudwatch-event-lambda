AWSTemplateFormatVersion: 2010-09-09

Description: cloudwatch-event-lambda - Exmaple of lambda listening to cloudwatch events and then posting to sns with a specific subject

Parameters:

  AlarmName:
    Description: The name of the alarm to list for parameter
    Type: String
    Default: Default
  EmailTo:
    Description: Email address to notify
    Type: String
    Default: Default

Mappings:

  MetricsMap:
    Send-Data:
      SendAnonymousData: "Yes" # change to 'No' if needed

  SourceCode:
    General:
      S3Bucket: %%BUCKET_NAME%%
      KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"

Resources:
  DefaultFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: !Sub DefaultFunction-Policy-${AWS::StackName}-${AWS::Region}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:test-email-topic"
  EventBusPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      Action: events:PutEvents
      EventBusName: "default"
      Principal: !Sub "${AWS::AccountId}"
      StatementId: "grant-local-account"
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggers lambda function when cloudwatch alarm triggers
      EventBusName: "default"
      EventPattern: !Sub |
        {
          "source": [ "aws.cloudwatch" ],
          "detail-type": [ "CloudWatch Alarm State Change" ],
          "detail": {
            "alarmName": ["${AlarmName}"],
            "state": {
              "value": ["ALARM"]
            }
          }
        }
      State: ENABLED
      Targets:
        - Arn: !GetAtt DefaultFunction.Arn
          Id: TriggerDefaultFunction

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefaultFunction
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRule.Arn
  EmailTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Test email topic"
      Subscription:
        - Endpoint: !Ref EmailTo
          Protocol: email
      TopicName: test-email-topic
  DefaultFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Place holder for lambda function
      Environment:
        Variables:
          LOG_LEVEL: 'DEBUG' # change to WARN, ERROR or DEBUG as needed
          TOPIC_ARN: !Ref EmailTopic
      Handler: cloudwatch_event_lambda.index.lambda_handler
      Role: !GetAtt DefaultFunctionRole.Arn
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "%%ZIP_FILE_NAME%%"]]
      Runtime: python3.8
      Layers:
        - !Ref DefaultLayer
      Timeout: 30

  DefaultFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      Description: !Sub "Latest version of ${DefaultFunction}"
      FunctionName: !GetAtt DefaultFunction.Arn
  DefaultLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "%%LAYER_FILE_NAME%%"]]
      Description: Layer for cloudwatch_event_lambda
      LayerName: cloudwatch_event_lambda-layer
            